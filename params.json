{"name":"Falcon","tagline":"A Fast, Reliable, Distributed Build System.","body":"Falcon\r\n======\r\n\r\nA Fast, Reliable, Distributed Build System.\r\n\r\n## Purpose\r\n\r\nFalcon is a build system with a focus on speed and scalability.\r\n\r\nThis project is in its early stages. We are currently mainly focused on building\r\na proof-of-concept rather than a robust cross-platform build system.\r\n\r\n## Concepts\r\n\r\n### Simple configuration file\r\n\r\nThe configuration file - the \"makefile\" - is designed to be human-readable but\r\nnot convenient to write by hand. There are no variables, the file only contains\r\nthe dependency graph of the project, with a list of rules that take several\r\ninputs to build several outputs. We consider that it is not Falcon's job to\r\nprovide a powerful way to define the dependency graph. We expect this file to be\r\ngenerated by other tools such as CMake.\r\n\r\n### Use Watchman to permit fast incremental builds\r\n\r\nFalcon is a daemon that uses watchman to be notified of changes that occur on\r\nthe files that belong to the project. The configuration file is only loaded once\r\non startup and each time it changes. This makes incremental builds faster\r\nbecause at the time you trigger a build, falcon already has the graph in memory\r\nand knows what to do.\r\n\r\n### Consistency and correctness\r\n\r\nFalcon aims at being consistent and correct. For example, if you change the\r\nconfiguration file, Falcon should remove any stale target that no longer exists.\r\n\r\n### Smart local caching\r\n\r\nFalcon understands git and provides a caching mechanism so that you don't need\r\nto re-build anything when you switch to a branch you already built. Falcon\r\nensures that the last version of your project is in cache, for every git branch.\r\n\r\n### Distributed caching\r\n\r\nFalcon will be Distributed. If you are working on a very large project with\r\nhundreds of thousands of files, you will be able to build changes that you pull\r\nvery quickly. Falcon will be able to retrieve already built targets by querying\r\nthe cache of another Falcon daemon running in a continuous build server. Why\r\nbuild something that someone already built for you?\r\n\r\n### Thrift API\r\n\r\nFalcon uses Thrift to provide an API that will allow developers to develop\r\napplications around Falcon. Clients are able to query Falcon for the state of\r\nthe project's graph, trigger builds, manage the cache, etc. Among other things,\r\nthis will permit a deep integration to IDEs and editors.\r\n\r\n## Current state\r\n\r\nRight now falcon is in a working (but experimental) state. There are still a few\r\nimportant missing parts:\r\n\r\n- We plan on building a CMake generator for the graph configuration file;\r\n- The reload of the graph configuration file is not fully working yet;\r\n- Distributed caching is not implemented.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}